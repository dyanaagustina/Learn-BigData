import pandas as pds
import seaborn as sbn
import numpy as npy
import matplotlib.pyplot as plb
import statsmodels.api as sm

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from scipy.stats import ttest_ind

data_life = pds.read_csv('life-expectancy.csv')
data_life.head()
data_life.drop(['Country', 'Status'], axis=1, inplace=True)
data_life.isnull().sum()

data_life['Life expectancy '].fillna(data_life['Life expectancy '].median(), inplace=True)
data_life['Adult Mortality'].fillna(data_life['Adult Mortality'].median(), inplace=True)
data_life['Alcohol'].fillna(data_life['Alcohol'].median(), inplace=True)
data_life['Hepatitis B'].fillna(data_life['Hepatitis B'].median(), inplace=True)
data_life[' BMI '].fillna(data_life[' BMI '].median(), inplace=True)
data_life['Polio'].fillna(data_life['Polio'].median(), inplace=True)
data_life['Total expenditure'].fillna(data_life['Total expenditure'].median(), inplace=True)
data_life['Diphtheria '].fillna(data_life['Diphtheria '].median(), inplace=True)
data_life['GDP'].fillna(data_life['GDP'].median(), inplace=True)
data_life['Population'].fillna(data_life['Population'].median(), inplace=True)
data_life[' thinness  1-19 years'].fillna(data_life[' thinness  1-19 years'].median(), inplace=True)
data_life[' thinness 5-9 years'].fillna(data_life[' thinness 5-9 years'].median(), inplace=True)
data_life['Income composition of resources'].fillna(data_life['Income composition of resources'].median(), inplace=True)
data_life['Schooling'].fillna(data_life['Schooling'].median(), inplace=True)

data_life.isnull().sum()

x = data_life.drop(columns='Life expectancy ')
y = data_life['Life expectancy ']

x2 = sm.add_constant(x)
est = sm.OLS(y, x2)
est2 = est.fit()

print(est2.summary())

data_life.drop(['Year','percentage expenditure','Population',' thinness  1-19 years',' thinness 5-9 years'], axis=1, inplace=True)

x = data_life.drop(columns='Life expectancy ')
y = data_life['Life expectancy ']

x2 = sm.add_constant(x)
est = sm.OLS(y, x2)
est2 = est.fit()

print(est2.summary())

data_life.describe()

plb.figure(figsize=(10,8))

sbn.pairplot(data=data_life, x_vars=['Adult Mortality','infant deaths','Alcohol','Hepatitis B','Measles ',' BMI ','under-five deaths ','Polio'], y_vars=['Life expectancy '], size=5, aspect=0.75)

plb.figure(figsize=(10,8))

sbn.pairplot(data=data_life, x_vars=['Total expenditure','Diphtheria ',' HIV/AIDS','GDP','Income composition of resources','Schooling'], y_vars=['Life expectancy '], size=5, aspect=0.75)

x = data_life.drop(columns='Life expectancy ')
y = data_life['Life expectancy ']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.5, random_state=0)

lin_reg = LinearRegression()

lin_reg.fit(x_train, y_train)

print(lin_reg.coef_)

print(lin_reg.intercept_)

lin_reg.score(x_test, y_test)

lin_reg.predict(x_test)

sbn.distplot(lin_reg.predict(x_test), hist = False, color = 'r', label = 'Predicted Values')
sbn.distplot(y_test, hist = False, color = 'b', label = 'Actual Values')
plb.title('Actual vs Predicted Values', fontsize = 16)
plb.xlabel('Values', fontsize = 12)
plb.ylabel('Frequency', fontsize = 12)
plb.legend(loc = 'upper left', fontsize = 13)
